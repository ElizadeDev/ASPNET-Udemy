using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Primitives;
using System.Threading.Tasks;

namespace MyFirstApp.CustomMiddleware
{
    // You may need to install the Microsoft.AspNetCore.Http.Abstractions package into your project
    public class CustomLoginMiddleware
    {
        private readonly RequestDelegate _next;

        public CustomLoginMiddleware(RequestDelegate next)
        {
            _next = next;
        }

        public async Task Invoke(HttpContext httpContext)
        {
            if (httpContext.Request.Method == "GET")
                await _next(httpContext);
            else if (httpContext.Request.Method == "POST")
            {
                StreamReader reader = new StreamReader(httpContext.Request.Body);
                string body = await reader.ReadToEndAsync();
                bool isValid = true;

                Dictionary<string, StringValues> queryDict = 
                Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(body);

                if (!queryDict.ContainsKey("email"))
                {
                    if (httpContext.Response.StatusCode == 200)
                        httpContext.Response.StatusCode = 400;
                    isValid = false;
                    await httpContext.Response.WriteAsync("Invalid input for 'email'\n");
                }
                if (!queryDict.ContainsKey("password"))
                {
                    if (httpContext.Response.StatusCode == 200)
                        httpContext.Response.StatusCode = 400;
                    isValid = false;
                    await httpContext.Response.WriteAsync("Invalid input for 'password'\n");
                }

                if (isValid)
                {
                    if (queryDict["email"] == "admin@example.com" && queryDict["password"] == "admin1234")
                        await httpContext.Response.WriteAsync("Successful login");
                    else
                        await httpContext.Response.WriteAsync("Invalid login");
                }
            }
        }
    }

    // Extension method used to add the middleware to the HTTP request pipeline.
    public static class CustomLoginMiddlewareExtensions
    {
        public static IApplicationBuilder UseCustomLoginMiddleware(this IApplicationBuilder builder)
        {
            return builder.UseMiddleware<CustomLoginMiddleware>();
        }
    }
}




-------------Program.cs------------------
using MyFirstApp.CustomMiddleware;

var builder = WebApplication.CreateBuilder(args);
var app = builder.Build();

app.UseCustomLoginMiddleware();

app.Run(async (HttpContext context) =>
{
    await context.Response.WriteAsync("No response");
});

app.Run();
